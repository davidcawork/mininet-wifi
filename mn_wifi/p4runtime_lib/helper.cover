       # Copyright 2017-present Open Networking Foundation
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #    http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       #
    1: import re
       
    1: import google.protobuf.text_format
    1: from p4.v1 import p4runtime_pb2
    1: from p4.config.v1 import p4info_pb2
       
    1: from convert import encode
       
    2: class P4InfoHelper(object):
    1:     def __init__(self, p4_info_filepath):
    4:         p4info = p4info_pb2.P4Info()
               # Load the p4info file into a skeleton P4Info object
    4:         with open(p4_info_filepath) as p4info_f:
    4:             google.protobuf.text_format.Merge(p4info_f.read(), p4info)
    4:         self.p4info = p4info
       
    1:     def get(self, entity_type, name=None, id=None):
   40:         if name is not None and id is not None:
                   raise AssertionError("name or id must be None")
       
   76:         for o in getattr(self.p4info, entity_type):
   76:             pre = o.preamble
   76:             if name:
   76:                 if (pre.name == name or pre.alias == name):
   40:                     return o
                   else:
                       if pre.id == id:
                           return o
       
               if name:
                   raise AttributeError("Could not find %r of type %s" % (name, entity_type))
               else:
                   raise AttributeError("Could not find id %r of type %s" % (id, entity_type))
       
    1:     def get_id(self, entity_type, name):
   40:         return self.get(entity_type, name=name).preamble.id
       
    1:     def get_name(self, entity_type, id):
               return self.get(entity_type, id=id).preamble.name
       
    1:     def get_alias(self, entity_type, id):
               return self.get(entity_type, id=id).preamble.alias
       
    1:     def __getattr__(self, attr):
               # Synthesize convenience functions for name to id lookups for top-level entities
               # e.g. get_tables_id(name_string) or get_actions_id(name_string)
   40:         m = re.search("^get_(\w+)_id$", attr)
   40:         if m:
   40:             primitive = m.group(1)
   80:             return lambda name: self.get_id(primitive, name)
       
               # Synthesize convenience functions for id to name lookups
               # e.g. get_tables_name(id) or get_actions_name(id)
               m = re.search("^get_(\w+)_name$", attr)
               if m:
                   primitive = m.group(1)
                   return lambda id: self.get_name(primitive, id)
       
               raise AttributeError("%r object has no attribute %r" % (self.__class__, attr))
       
    1:     def get_match_field(self, table_name, name=None, id=None):
   16:         for t in self.p4info.tables:
   16:             pre = t.preamble
   16:             if pre.name == table_name:
   16:                 for mf in t.match_fields:
   16:                     if name is not None:
   16:                         if mf.name == name:
   16:                             return mf
                           elif id is not None:
                               if mf.id == id:
                                   return mf
               raise AttributeError("%r has no attribute %r" % (table_name, name if name is not None else id))
       
    1:     def get_match_field_id(self, table_name, match_field_name):
               return self.get_match_field(table_name, name=match_field_name).id
       
    1:     def get_match_field_name(self, table_name, match_field_id):
               return self.get_match_field(table_name, id=match_field_id).name
       
    1:     def get_match_field_pb(self, table_name, match_field_name, value):
   16:         p4info_match = self.get_match_field(table_name, match_field_name)
   16:         bitwidth = p4info_match.bitwidth
   16:         p4runtime_match = p4runtime_pb2.FieldMatch()
   16:         p4runtime_match.field_id = p4info_match.id
   16:         match_type = p4info_match.match_type
   16:         if match_type == p4info_pb2.MatchField.EXACT:
                   exact = p4runtime_match.exact
                   exact.value = encode(value, bitwidth)
   16:         elif match_type == p4info_pb2.MatchField.LPM:
   16:             lpm = p4runtime_match.lpm
   16:             lpm.value = encode(value[0], bitwidth)
   16:             lpm.prefix_len = value[1]
               elif match_type == p4info_pb2.MatchField.TERNARY:
                   lpm = p4runtime_match.ternary
                   lpm.value = encode(value[0], bitwidth)
                   lpm.mask = encode(value[1], bitwidth)
               elif match_type == p4info_pb2.MatchField.RANGE:
                   lpm = p4runtime_match.range
                   lpm.low = encode(value[0], bitwidth)
                   lpm.high = encode(value[1], bitwidth)
               else:
                   raise Exception("Unsupported match type with type %r" % match_type)
   16:         return p4runtime_match
       
    1:     def get_match_field_value(self, match_field):
               match_type = match_field.WhichOneof("field_match_type")
               if match_type == 'valid':
                   return match_field.valid.value
               elif match_type == 'exact':
                   return match_field.exact.value
               elif match_type == 'lpm':
                   return (match_field.lpm.value, match_field.lpm.prefix_len)
               elif match_type == 'ternary':
                   return (match_field.ternary.value, match_field.ternary.mask)
               elif match_type == 'range':
                   return (match_field.range.low, match_field.range.high)
               else:
                   raise Exception("Unsupported match type with type %r" % match_type)
       
    1:     def get_action_param(self, action_name, name=None, id=None):
   96:         for a in self.p4info.actions:
   96:             pre = a.preamble
   96:             if pre.name == action_name:
   48:                 for p in a.params:
   48:                     if name is not None:
   48:                         if p.name == name:
   32:                             return p
                           elif id is not None:
                               if p.id == id:
                                   return p
               raise AttributeError("action %r has no param %r, (has: %r)" % (action_name, name if name is not None else id, a.params))
       
    1:     def get_action_param_id(self, action_name, param_name):
               return self.get_action_param(action_name, name=param_name).id
       
    1:     def get_action_param_name(self, action_name, param_id):
               return self.get_action_param(action_name, id=param_id).name
       
    1:     def get_action_param_pb(self, action_name, param_name, value):
   32:         p4info_param = self.get_action_param(action_name, param_name)
   32:         p4runtime_param = p4runtime_pb2.Action.Param()
   32:         p4runtime_param.param_id = p4info_param.id
   32:         p4runtime_param.value = encode(value, p4info_param.bitwidth)
   32:         return p4runtime_param
       
           def buildTableEntry(self,
                               table_name,
    1:                         match_fields=None,
    1:                         default_action=False,
    1:                         action_name=None,
    1:                         action_params=None,
    1:                         priority=None):
   20:         table_entry = p4runtime_pb2.TableEntry()
   20:         table_entry.table_id = self.get_tables_id(table_name)
       
   20:         if priority is not None:
                   table_entry.priority = priority
       
   20:         if match_fields:
   16:             table_entry.match.extend([
   16:                 self.get_match_field_pb(table_name, match_field_name, value)
   32:                 for match_field_name, value in match_fields.iteritems()
                   ])
       
   20:         if default_action:
    4:             table_entry.is_default_action = True
       
   20:         if action_name:
   20:             action = table_entry.action.action
   20:             action.action_id = self.get_actions_id(action_name)
   20:             if action_params:
   16:                 action.params.extend([
   16:                     self.get_action_param_pb(action_name, field_name, value)
   48:                     for field_name, value in action_params.iteritems()
                       ])
   20:         return table_entry
       
    1:     def buildMulticastGroupEntry(self, multicast_group_id, replicas):
               mc_entry = p4runtime_pb2.PacketReplicationEngineEntry()
               mc_entry.multicast_group_entry.multicast_group_id = multicast_group_id
               for replica in replicas:
                   r = p4runtime_pb2.Replica()
                   r.egress_port = replica['egress_port']
                   r.instance = replica['instance']
                   mc_entry.multicast_group_entry.replicas.extend([r])
               return mc_entry
